ThreadLocal(C)

*******************一、定义*******************
是一个线程操作变量副本的工具类，可以将每个变量副本放入每个线程内互不干扰，形成线程封闭，避免并发问题
当线程销毁时，其内部的变量副本也随之销毁

*******************二、使用场景*******************
在高并发场景下，ThreadLocal实现了线程封闭，使得各个线程之间操作变量不会发生并发问题
如：在实际场景中，常常需要将用户信息从controller层层向下传递，甚至可能传递到util层，这样看起来不太优雅
那么可以使用ThreadLocal，在接口处理前，将用户信息存在ThreadLocal中，要用的时候从ThreadLocal中取出来
这样做，即优雅，又实现了线程封闭，避免了并发问题

*******************三、实现原理*******************
每个线程类Thread内部都存在一个ThreadLocalMap，这个map本身定义在ThreadLocal类中。ThreadLocal就是用来操作这个map的工具类
1、ThreadLocal.set(ThreadLocal, Object)
以ThreadLocal对象实例this对键，变量副本Object为值，将这个键值对放入当前线程的ThreadLocalMap中
2、ThreadLocal.get(ThreadLocal)
以ThreadLocal对象实例this对键，从当前线程的ThreadLocalMap中获取this对应的变量副本
3、ThreadLocal.remove(ThreadLocal)
以ThreadLocal对象实例this对键，从当前线程的ThreadLocalMap中删除this对应的变量副本

*******************四、ThreadLocalMap*******************
1、数据结构
ThreadLocalMap存储数据的是一个Entry数组，Entry类包含ThreadLocal作为key，Object（变量副本）作为值，仅仅是数组，没有形成链表（不像HashMap）
ThreadLocalMap将ThreadLocal进行hashCode()运算得出其在Entry数组中的索引位置
2、如何解决hash冲突
当一个Thread的ThreadLocal很多时就很可能发生hash冲突的情况，即几个不同的ThreadLocal的hash值相同
此时ThreadLocalMap采取的方法是线性探测法，即根据ThreadLocal的hash值作为其在数组中的起始位置，
如果发现当前位置已经有元素了，那么索引向前移-1或向后移+1，知道找到空位

显然这种线性探测解决hash冲突的效率太低，当ThreadLocal变得很多，效率就越来越低
所以建议每个线程不能存放太多变量副本，避免hash冲突带来的问题
3、ThreadLocal的value内存泄漏问题
在ThreadLocalMap中，key是弱引用，value是强引用
在GC时，如果外部没有对key的强引用，那么key会被回收，
如果创建ThreadLocal的线程一直运行，那么value就可能一直不能被回收导致内存泄漏

解决方法：在线程结束前显式调用remove方法