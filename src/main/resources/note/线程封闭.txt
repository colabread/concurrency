线程封闭：把对象封装到一个线程里，只有这一个线程可以看到这个对象

线程封闭是为了避免并发问题

线程封闭举例：
1、堆栈封闭：
即方法中的局部变量，会被每一个线程栈拷贝到自己的工作内存，故不会出现并发问题
所以能用局部变量，就不用全局变量，全局变量容易引起并发问题

2、ThreadLocal线程封闭
推荐用法
ThreadLocal内部存在一个map，key -- 每个线程的名称，value -- 要封闭的对象
每一个线程中的对象，都对应着map中的值

ThreadLocal的使用场景：
将用户信息存储到ThreadLocal中
在实际场景中，尝尝需要将用户信息从controller层层向下传递，甚至可能传递到util层，这样看起来不太优雅
那么可以使用ThreadLocal，在接口处理前，将用户信息存在ThreadLocal中，要用的时候从ThreadLocal中取出来
这样做，即优雅，又实现了线程封闭，避免了并发问题

例子中，过滤器和拦截器的执行顺序 ：过滤器于拦截器先执行

3、jdbc连接池
在jdbc连接池的实现中，并没有做过多的线程并发安全处理，而是通过连接池来实现connection的线程封闭的
一个线程从连接池中获取到一个connection后，连接池并不会将此connection分配给其他线程
而是等当前线程归还connection之后再给其他线程，这也就做到了线程封闭